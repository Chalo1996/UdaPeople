version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy environments backend
          when: << parameters.when >>
          command: |
            echo "Destroying environment: << parameters.id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: << parameters.when >>
          command: |
            SUCCESS=$(curl https://kvdb.io/56vh4oJCEiBXg9JpZtg87n/SUCCESS)
            if (( SUCCESS ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:18.9.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend_build]
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:18.9.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend_build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:18.9.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend_test]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: cimg/node:18.9.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend_test]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: cimg/node:18.9.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend_restore]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm update
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend_restore

  scan-backend:
    docker:
      - image: cimg/node:18.9.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend_restore]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical
            npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend_restore

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.11.0b3-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f2:c3:1c:24:96:da:6b:87:f6:a2:3c:c3:a7:aa:75:2c"]
      - attach_workspace:
          at: ~/
      - run:
          name: install dependancies needed for my playbook
          command: |
            apk add --update ansible
            apk add --update tar gzip
            apk add --update curl
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
            echo "insecure" >> ~/.curlrc
      - run:
          name: configuring infrastructure
          command: |
            # cd .circleci/ansible
            ansible-playbook -i inventory.txt .circleci/ansible/configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  run-migrations:
    docker:
      - image: cimg/node:18.9.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend_restore]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            echo "here"
      - run:
          name: Send migration to memcache
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/56vh4oJCEiBXg9JpZtg87n/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-frontend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: install dependencies
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
            apk add --update curl
            apk add --update nodejs
            apk add --update npm
            apk add --update tar                        
            apk add --update gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
            cat frontend/.env
            echo "frontend link"
            echo "https://udapeople-${CIRCLE_WORKFLOW_ID}.s3.amazonaws.com/index.html"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f2:c3:1c:24:96:da:6b:87:f6:a2:3c:c3:a7:aa:75:2c"]
      - run:
          name: install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli openssh-client git nodejs npm tree curl
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is ------- $(tail -1 inventory.txt)"
            cat inventory.txt
            ls -l ~/project/
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url and backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow ID
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              echo "udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "No old stacks here"
            fi

  node-exporter:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f2:c3:1c:24:96:da:6b:87:f6:a2:3c:c3:a7:aa:75:2c"]
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y  tar gzip
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
            amazon-linux-extras install -y epel
            yum install -y ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure node_exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook  node-exporter.yml -i inventory.txt


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, build-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      - node-exporter:
          requires: [smoke-test]

# version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       workflow-id:
#         type: string  
#     steps:
#       - run:
#           name: Destroy backend environment
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack \
#               --stack-name "udapeople-backend-<<parameters.workflow-id>>"
#             aws s3 rm "s3://udapeople-<<parameters.workflow-id>>" --recursive 
#             aws cloudformation delete-stack \
#               --stack-name "udapeople-frontend-<<parameters.workflow-id>>" 
#   revert-migrations:
#     description: Revert the last migration
#     parameters:
#       workflow-id:
#         type: string      
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             SUCCESS=$(curl --insecure  https://kvdb.io/56vh4oJCEiBXg9JpZtg87n/migration_<< parameters.workflow-id >>)
#             # Logic for reverting the database state
#             if (( $SUCCESS == 1 ));
#             then
#               cd ~/project/backend
#               npm install
#               npm run migration:revert
#             fi  
# jobs:
#   build-frontend:
#     docker:
#       - image: cimg/node:18.9.0
    
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: build frontend
#           command: |
#             cd frontend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: cimg/node:18.9.0
    
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: build backend
#           command: |
#             cd backend
#             npm run
#             npm run build
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       - image: cimg/node:18.9.0

#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-test]
#       - run:
#           name: build frontend
#           command: |
#             cd frontend
#             npm install
#             npm run test
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-test

#   test-backend:
#     docker:
#       - image: cimg/node:18.9.0

#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-test]
#       - run:
#           name: test-backend
#           command: |
#             cd backend
#             npm install
#             npm run test
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-test

#   scan-frontend:
#     docker:
#       - image: cimg/node:18.9.0
    
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-scan]
#       - run:
#           name: scan-frontend
#           command: |
#             cd frontend
#             npm install
#             npm audit fix --audit-level=critical --force
#             npm audit --audit-level=critical
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-scan

#   scan-backend:
#     docker:
#       - image: cimg/node:18.9.0
    
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-scan]
#       - run:
#           name: scan-backend
#           command: |
#             cd backend
#             npm install
#             npm audit fix --audit-level=critical --force
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-scan
    
#   deploy-infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run: 
#           name: install tar
#           command: |
#             yum install -y tar gzip
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --tags project=udapeople${CIRCLE_WORKFLOW_ID:0:7} \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags project=udapeople${CIRCLE_WORKFLOW_ID:0:7} \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             export BACK_END_IP=$(aws ec2 describe-instances \
#               --filters "Name=tag:project,Values=udapeople${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query "Reservations[*].Instances[*].PublicIpAddress" \
#               --output text)
#             echo $BACK_END_IP >> .circleci/ansible/inventory.txt
#             echo $BACK_END_IP
#             echo "hello"
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt

#       - destroy-environment:
#           workflow-id : ${CIRCLE_WORKFLOW_ID:0:7}

#   configure-infrastructure:
#     docker:
#       - image: python:3.11.0b3-alpine3.16

#     steps:
#       - checkout 
#       - add_ssh_keys:
#           fingerprints: ["f2:c3:1c:24:96:da:6b:87:f6:a2:3c:c3:a7:aa:75:2c"]

#       - attach_workspace:
#           at: ~/

#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update openssh-client git
#             apk add --update ansible
#             apk add --update aws-cli
#             apk add --update tar
#             apk add --update gzip
#       - run:
#           name: Configure server
#           command: |
#             cd .circleci/ansible
#             ansible-playbook -i inventory.txt configure-server.yml
#       - destroy-environment:
#           workflow-id : ${CIRCLE_WORKFLOW_ID:0:7}

#   run-migrations:
#     docker:
#       - image: cimg/node:18.9.0
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
#             echo "here"
#       - run:
#           name: Send migration status to kvdb.io
#           command: |
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#                 curl --insecure https://kvdb.io/56vh4oJCEiBXg9JpZtg87n/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             fi
#       - destroy-environment:
#           workflow-id : ${CIRCLE_WORKFLOW_ID:0:7}

#   # deploy-frontend:
#   #   docker:
#   #     - image: python:3.11.0b3-alpine3.16
#   #   steps:
#   #     - checkout
#   #     - attach_workspace:
#   #         at: ~/
#   #     - run:
#   #         name: Install dependencies
#   #         command: |
#   #           apk add --update openssh-client git
#   #           apk add --update ansible
#   #           apk add --update aws-cli
#   #           apk add --update tar
#   #           apk add --update gzip
#   #           apk add --update nodejs npm
#   #     - run:
#   #         name: Get backend url
#   #         command: |
#   #           export BACKEND_IP=$(aws ec2 describe-instances \
#   #             --filters "Name=tag:project,Values=udapeople${CIRCLE_WORKFLOW_ID:0:7}" \
#   #             --query "Reservations[*].Instances[*].PublicIpAddress" \
#   #             --output text)
#   #           export API_URL="http://${BACKEND_IP}:3030"
#   #           echo "${API_URL}"
#   #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#   #           cat frontend/.env
#   #     - run:
#   #         name: Deploy frontend objects
#   #         command: |
#   #           cd frontend
#   #           npm install
#   #           npm run build
#   #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#   #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#   #     - destroy-environment:
#   #         workflow-id : ${CIRCLE_WORKFLOW_ID:0:7}  
#   #     - revert-migrations:
#   #         workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
        
#   deploy-backend:
#     docker:
#       - image: python:3.11.0b3-alpine3.16
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["f2:c3:1c:24:96:da:6b:87:f6:a2:3c:c3:a7:aa:75:2c"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update openssh-client git
#             apk add --update ansible
#             apk add --update aws-cli
#             apk add --update tar
#             apk add --update gzip
#             apk add --update nodejs npm
#       - run:
#           name: Deploy backend
#           command: |
#             cd backend
#             npm i
#             npm run build
#             cd ..
#             tar -C backend -czvf artifact.tar.gz .
#             mkdir ~/project/.circleci/ansible/roles/deploy/files
#             cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
#             ls ~/project/.circleci/ansible/roles/deploy/files/
#             cd .circleci/ansible
#             echo "Contents  of the inventory.txt file is -------"
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml
#       - destroy-environment:
#           workflow-id : ${CIRCLE_WORKFLOW_ID:0:7}
#       - revert-migrations:
#           workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

#   # smoke-test:
#   #   docker:
#   #     - image: python:3.11.0b3-alpine3.16 
#   #   steps:
#   #     - checkout
#   #     - attach_workspace:
#   #         at: ~/
#   #     - run:
#   #         name: Install dependencies
#   #         command: |
#   #           apk add --update aws-cli
#   #           apk add --update nodejs npm
#   #           apk add --update curl
#   #     - run:
#   #         name: Backend smoke test.
#   #         command: |
#   #           export BACKEND_IP=$(aws ec2 describe-instances \
#   #             --filters "Name=tag:project,Values=udapeople${CIRCLE_WORKFLOW_ID:0:7}" \
#   #             --query "Reservations[*].Instances[*].PublicIpAddress" \
#   #             --output text)
#   #           export API_URL="http://${BACKEND_IP}:3030"
#   #           echo ${API_URL}
#   #           sleep 7
#   #           if curl "${API_URL}/api/status" | grep "ok"
#   #           then
#   #               return 0
#   #           else
#   #               return 1
#   #           fi
#   #     - run:
#   #         name: Frontend smoke test.
#   #         command: |
#   #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
#   #           echo ${URL} 
#   #           if curl -s ${URL} | grep "Welcome"
#   #           then
#   #             return 0
#   #           else
#   #             return 1
#   #           fi
#   #     - destroy-environment:
#   #         workflow-id : ${CIRCLE_WORKFLOW_ID:0:7}
#   #     - revert-migrations:
#   #         workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

#   # cloudfront-update:
#   #   docker:
#   #     - image: python:3.11.0b3-alpine3.16 
#   #   steps:
#   #     - checkout
#   #     - attach_workspace:
#   #         at: ~/
#   #     - run:
#   #         name: Install dependencies
#   #         command: |
#   #           apk add --update aws-cli
#   #           apk add --update nodejs npm
#   #           apk add --update curl
#   #     - run:
#   #         name: Update cloudfront distribution
#   #         command: |
#   #           aws cloudformation deploy \
#   #             --template-file .circleci/files/cloudfront.yml \
#   #             --stack-name InitialStack \
#   #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#   #             --tags project=udapeople${CIRCLE_WORKFLOW_ID:0:7} 
#   #     - destroy-environment:
#   #         workflow-id : ${CIRCLE_WORKFLOW_ID:0:7}
#   #     - revert-migrations:
#   #         workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

#   # cleanup:
#   #   docker:
#   #     - image: amazon/aws-cli
#   #   steps:
#   #     - checkout
#   #     - run:
#   #         name: Install tar utility
#   #         command: |
#   #           yum install -y tar gzip
#   #     - attach_workspace:
#   #         at: ~/
#   #     - run:
#   #         name: Get old stack workflow id
#   #         command: |
#   #           export OLD_WORKFLOW_ID=$(aws cloudformation \
#   #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#   #             --no-paginate --output text)
#   #           echo "Old workflow id is ${OLD_WORKFLOW_ID}"
#   #           echo "CIRCLE_WORKFLOW_ID is ${CIRCLE_WORKFLOW_ID:0:7}"
#   #           export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#   #           --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
#   #           echo "Stack names : ${STACKS[@]}"
#   #           if [[ "${OLD_WORKFLOW_ID}" =~ "${STACKS[@]}"  ]]
#   #           then
#   #             aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
#   #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
#   #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
#   #           fi
 
# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires:
#             - build-frontend
#       - test-backend:
#           requires:
#             - build-backend
#       - scan-frontend:
#           requires: [build-frontend]
#       - scan-backend:
#           requires: [build-backend]
#       - deploy-infrastructure:
#           requires:
#             - scan-backend
#             - scan-frontend
#             - test-frontend
#             - test-backend
#           filters:
#             branches:
#               only: main
#       - configure-infrastructure:
#           requires:
#             - deploy-infrastructure
#           filters:
#             branches:
#               only: main
#       - run-migrations:
#           requires:
#             - configure-infrastructure
#           filters:
#             branches:
#               only: main
#       # - deploy-frontend:
#       #     requires:
#       #       - configure-infrastructure
#       #     filters:
#       #       branches:
#       #         only: main
#       - deploy-backend:
#           requires:
#             - configure-infrastructure
#             - run-migrations
#           filters:
#             branches:
#               only: main
#       # - smoke-test:
#       #     requires:
#       #       - deploy-backend
#       #     filters:
#       #       branches:
#       #         only: main
#       # - cloudfront-update:
#       #     requires:
#       #       - smoke-test
#       #     filters:
#       #       branches:
#       #         only: main
#       # - cleanup:
#       #     requires:
#       #       - cloudfront-update
#       #     filters:
#       #       branches:
#       #         only: main
